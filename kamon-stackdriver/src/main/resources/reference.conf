kamon {
  stackdriver {
    tags {
      mappings {
        "http.method" = "/http/method"
        "http.status_code" = "/http/status_code"
      }
    }
    auth {
      # How to authenticate with Google APIs. Possible values:
      # - "application-default": use a method called default authentication. Recommended when running on Compute
      # Engine/Container Engine. [https://developers.google.com/identity/protocols/application-default-credentials]
      # - "keyfile": use your own keyfile to log in into a Google Service Account.
      # [https://developers.google.com/identity/protocols/OAuth2ServiceAccount]
      # - "data-env-var": Read keyfile from environemnt variable value
      method = "application-default"
      # Only used when auth method is "keyfile". The path must contain a Service Account key file in JSON format.
      keyfile-path = ""
      data-env-var = "GOOGLE_APPLICATION_CREDENTIALS_DATA"
    }
    metric {
      distribution {
        bucket-type = "exponential"
        num-finite-buckets = 55
        growth-factor = 1.4
        scale = 1.0
      }

      # Resource to report as source of the metrics. Recommended to change when you have more than one instance,
      # to ensure reported timeseries can be tied back to an instance. For example, when running on Compute Engine the
      # recommended type is "gce_instance", for Container Engine "gke_container" and for EC2 "aws_ec2_instance".
      # A list of all possible resource types and their labels: [https://cloud.google.com/monitoring/api/resources]
      resource {
        type: ""
        labels: {}
      }

      google-project-id = ""
    }
    span {
      google-project-id = ""
      skip-operation-names = []
      tags {
        mappings {
          "http.method" = "/http/method"
          "http.status_code" = "/http/status_code"
        }
      }
    }
  }
  modules {
    stackdriver-metric-reporter {
      enabled = true
      name = "StackdriverMetricReporter"
      description = "Stackdriver metric reporter"
      factory = "kamon.stackdriver.StackdriverMetricReporter$Factory"
    }
    stackdriver-span-reporter {
      enabled = true
      name = "StackdriverSpanReporter"
      description = "Stackdriver tracing reporter"
      factory = "kamon.stackdriver.StackdriverMetricReporter$Factory"
    }
  }

}